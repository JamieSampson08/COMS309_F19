package hello;

import hello.errors.ResourceNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Optional;
import java.util.concurrent.atomic.AtomicLong;

@RestController    // This means that this class is a Controller
@RequestMapping(path = "/greeting") // This means URL's start with /demo (after Application path)
public class GreetingController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	private static final String template = "Hello, %s!";
	private final AtomicLong counter = new AtomicLong();
	
	@PostMapping(path = "") // Map ONLY POST Requests
	public @ResponseBody
	Greeting addNewUser(@RequestBody User user) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		
		User u = userRepository.save(user);
		return new Greeting(u);
	}
	
	@GetMapping(path = "")
	public @ResponseBody
	Iterable<Greeting> getAllUsers() {
		// This returns a JSON or XML with the users
		Iterable<User> users = userRepository.findAll();
		ArrayList<Greeting> greetings = new ArrayList<>();
		Iterator<User> userIterator = users.iterator();
		
		while (userIterator.hasNext()) {
			greetings.add(new Greeting(userIterator.next()));
		}
		
		return greetings;
	}
	
	@GetMapping(path = "{id}")
	public @ResponseBody
	Greeting getUserById(@PathVariable("id") int id) {
		Optional<User> u = userRepository.findById(id);
		if(u.isPresent()){
			return new Greeting(u.get());
		}
		throw new ResourceNotFoundException();
		
	}
	
	@PutMapping(path="{id}")
	public @ResponseBody
	Greeting modifyUserById(@PathVariable("id") int id, @RequestBody User user) {
		if (!userRepository.existsById(id)){
			throw new ResourceNotFoundException();
		}
		
		User u = userRepository.findById(id).get();
		u.setName(user.getName());
		userRepository.save(u);
		
		return new Greeting(u);
	}
}