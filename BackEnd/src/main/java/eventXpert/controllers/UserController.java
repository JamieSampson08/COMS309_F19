package eventXpert.controllers;

import eventXpert.entities.User;
import eventXpert.errors.BadRequestException;
import eventXpert.errors.ResourceNotFoundException;
import eventXpert.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

/**
 * This is a controller for urls who begin with /users
 */
@RestController
@RequestMapping(path = "/users")
public class UserController {
	/**
	 * A UserRepository that is autogenerated by Spring.
	 * userRepository can be used to make CRUD operations to the database
	 */
	@Autowired
	private UserRepository userRepository;
	
	/**
	 * Gets all users in database
	 *
	 * @return list of all Users
	 */
	@GetMapping(path = "")
	public @ResponseBody
	Iterable<User> getAllUsers(@RequestParam(required = false) String email) {
		if (email != null) {
			return userRepository.findUserByEmail(email);
		}
		return userRepository.findAll();
	}
	
	/**
	 * Given a User id, return the User
	 *
	 * @param id of user
	 * @return User
	 */
	@GetMapping(path = "/{id}")
	public @ResponseBody
	User getUserById(@PathVariable("id") Integer id) {
		if (!userRepository.existsById(id)) {
			throw new ResourceNotFoundException();
		}
		
		return userRepository.findById(id).get();
	}
	
	/**
	 * Adds a user to the database
	 *
	 * @param user to add to database
	 * @return user that was created
	 */
	@PostMapping(path = "")
	public @ResponseBody
	User addUser(@RequestBody User user) {
		return userRepository.save(user);
	}
	
	/**
	 * Removes a user from the database
	 *
	 * @param id of user to delete
	 * @return string, success message
	 */
	@DeleteMapping(path = "/{id}")
	public @ResponseBody
	String deleteUser(@PathVariable("id") Integer id) {
		if (!userRepository.existsById(id)) {
			throw new ResourceNotFoundException();
		}
		userRepository.deleteById(id);
		return "Successfully deleted user";
	}
	
	/**
	 * Saves modified user data
	 *
	 * @param modifiedUser the new user to be saved int the database
	 * @param userId       the id of the user to be updated
	 * @return updated user event that was saved in the database
	 */
	@PutMapping(path = "/{userId}")
	public User saveUser(@RequestBody User modifiedUser, @PathVariable("userId") Integer userId) {
		User user = userRepository.findById(userId).get();
		validateDate(modifiedUser);
		
		user.setFirstName(modifiedUser.getFirstName());
		user.setLastName(modifiedUser.getLastName());
		user.setProfileFileName(modifiedUser.getProfileFileName());
		
		return userRepository.save(user);
	}
	
	private void validateDate(User user) {
		if (user.getEmail() == null || user.getEmail().length() > 100) {
			throw new BadRequestException("You must have an email with a length less than 100 characters");
		} else if (user.getFirstName() == null || user.getFirstName().length() > 100) {
			throw new BadRequestException("You must have an first name with a length less than 100 characters");
		} else if (user.getLastName() == null || user.getLastName().length() > 100) {
			throw new BadRequestException("You must have an last name with a length less than 100 characters");
		}
	}
}
